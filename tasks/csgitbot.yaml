
- name: Install acl, git
  become: yes
  ansible.builtin.package:
    name:
      - acl 
      - git
    state: latest
    update_cache: yes

- name: Create the bot user
  become: yes
  ansible.builtin.user:
    state: present
    system: true
    name: bot
    home: /opt/bot
    shell: /usr/sbin/nologin

- name: Get Python version
  ansible.builtin.command:
    cmd: python3 --version
  register: python_version

- name: Set Python version variable
  ansible.builtin.set_fact:
    python_version: "{{ python_version.stdout_lines[0] }}"

- name: Print Python version
  ansible.builtin.debug:
    var: python_version

- name: stat python3.10 directory
  ansible.builtin.stat:
    path: /usr/local/bin/python3.10
  register: python3_10

- name: set has python3.10
  ansible.builtin.set_fact:
    has_python3_10: "{{ python3_10.stat.exists or '3.10' in python_version }}"

- name: Install python dependencies
  become: yes
  apt:
    name:
      - make
      - build-essential
      - libssl-dev
      - zlib1g-dev
      - libbz2-dev
      - libreadline-dev
      - libsqlite3-dev
      - wget
      - curl
      - llvm
      - libncurses5-dev
      - libncursesw5-dev
      - xz-utils
      - tk-dev
      - libffi-dev
      - liblzma-dev
    state: present
  when: not has_python3_10

- name: download tar file
  become: yes
  become_user: bot
  ansible.builtin.unarchive:
    src: https://www.python.org/ftp/python/3.10.10/Python-3.10.10.tgz
    dest: /opt/bot/
    remote_src: yes
  when: not has_python3_10
  
- name: Configure python
  become: yes
  ansible.builtin.command:
    cmd: ./configure --enable-optimizations --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu && make install
    chdir: /opt/bot/Python-3.10.10
  when: not has_python3_10

- name: Configure python
  become: yes
  ansible.builtin.command:
    cmd: make install
    chdir: /opt/bot/Python-3.10.10
  when: not has_python3_10

- name: Check if poetry is installed
  become: yes
  ansible.builtin.stat:
    path: /opt/bot/.local/bin/poetry
  register: poetry_installed

- name: Download Poetry Install script
  become: yes
  become_user: bot
  ansible.builtin.get_url:
    url: https://install.python-poetry.org 
    dest: /opt/bot/install-poetry.py
  when: not poetry_installed.stat.exists

- name: Install Poetry Binary
  become: yes
  become_user: bot
  ansible.builtin.command:
    cmd: python3 /opt/bot/install-poetry.py --yes
  when: not poetry_installed.stat.exists

- name: Clone a github repository
  become: yes
  become_user: bot
  ansible.builtin.git:
    repo: "https://github.com/csunibo/csgitbot"
    dest: /opt/bot/source
    version: main
    force: yes
  register: git_result

- name: Install dependencies
  become: yes
  become_user: bot
  ansible.builtin.command:
    cmd: /opt/bot/.local/bin/poetry install
    chdir: /opt/bot/source

- name: Substitute repo owner line in config.init.py
  become: yes
  ansible.builtin.lineinfile:
    path: /opt/bot/source/config.ini
    regexp: '^repo_owner ='
    line: 'repo_owner = csunibo'

- name: Read the bot token
  ansible.builtin.set_fact:
    bot_token: "{{ lookup('file', 'passwords/csgitbot_token') }}"

- name: Copy the systemd service
  become: yes
  ansible.builtin.copy:
    src: files/csgitbot/bot.service
    dest: /etc/systemd/system/bot.service

- name: Copy the env file
  become: yes
  ansible.builtin.template:
    src: files/csgitbot/.env.j2
    dest: /opt/bot/source/.env

- name: Reload the systemd daemon
  become: yes
  ansible.builtin.service:
    daemon_reload: true

- name: Start and enable the bot service
  become: yes
  ansible.builtin.service:
    name: bot 
    state: started 
    enabled: true
  when: not git_result.changed

- name: Restart and enable the bot service
  become: yes
  ansible.builtin.service:
    name: bot 
    state: restarted 
    enabled: true
  when: git_result.changed
    